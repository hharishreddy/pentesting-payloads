Scope is what is actually needed to access in the request
scope=contacts
scope=contacts.read
scope=contact-list-r
scope=https://oauth-authorization-server.com/auth/scopes/user/contacts.readonly 

->1.Auth request to the OAuth server
GET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=code&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1
Host: oauth-authorization-server.com	

<->2. User login and consent

<-3. Authorization code grant 
GET /callback?code=a1b2c3d4e5f6g7h8&state=ae13d489bd00e3c24 HTTP/1.1
Host: client-app.com
->4. Access token request 
POST /token HTTP/1.1
Host: oauth-authorization-server.com
…
client_id=12345&client_secret=SECRET&redirect_uri=https://client-app.com/callback&grant_type=authorization_code&code=a1b2c3d4e5f6g7h8
5. Auth server respond with the secret
{
    "access_token": "z0y9x8w7v6u5",
    "token_type": "Bearer",
    "expires_in": 3600,
    "scope": "openid profile",
    …
}
6. API call
GET /userinfo HTTP/1.1
Host: oauth-resource-server.com
Authorization: Bearer z0y9x8w7v6u5

Vulnerabilities :

Change the parameter to diff user
Send GET requests 
•	/.well-known/oauth-authorization-server
•	/.well-known/openid-configuration
 Redirect URL
https://default-host.com &@foo.evil-user.net#@bar.evil-user.net/
•	If the app does not have the state id parameter then it will be attack to the CSRF 
•	Change the parameter to the different user to access the victim account 
•	https://oauth-authorization-server.com/?client_id=123&redirect_uri=client-app.com/callback&redirect_uri=evil-user.net
•	Parameter pollution attack can possible for the redirect
•	Or add the localhost.evil-user.net as a redirect parameter 
•	Redirect URI as the path traversal attack https://client-app.com/oauth/callback/../../example/path
•	

